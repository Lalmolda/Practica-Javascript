//REQUISITOS SOFTWARE.
//TENER INDEX.JS QUE SER√Å EL CORE Y EL ARCHIVO A EJECUTAR.

//‚úîDONE FRASE QUE INDIQUE QUE EMPIEZA EL JUEGO.
//‚úîDONE MOSTRAR DOS TABLEROS, DE JUGADOR A Y JUGADOR B. RELLENOS DE 'VACIO'.
//TODO CREAR CLASES Y/O OBJETOS BARCOS. PUNTOS DE VIDA DEL BARCO, IDENTIFICACI√ìN DE CADA BARCO. EL OBJETO TIENE QUE SABER EN QUE POSICIONES ESTA DENTRO DEL TABLERO (PROPIEDAD X,Y EN CADA CASILLA, SI SON DOS CASILLAS X,Y EN EL TABLERO, SER√çAN DOS VECTORES (PARTES DEL BARCO) CON DOS VALORES CADA UNO (POSICI√ìN EN EL TABLERO). )
//TODO FUNCI√ìN ALEATORIA COLOCAR LAS NAVES EN TABLERO DE JUGADOR A Y B (CREAR OBJETO BARCO Y MARCAR SU POSICION EN LA FUNCI√ìN). DEBE DECIDIR SI SE COLOCA HORIZONTAL O VERTICAL, NUNCA DIAGONAL. NO SOLAPAR BARCOS.
//TODO Intentar colocar primero los barcos m√°s grandes primero. Empezar por las mayores hasta llegar a la arenilla.
//TODO TABLERO ENEMIGO DEBE MOSTRARSE COMO VACIO ENTERO AL COMIENZO CON AGUA O TOCADO EN EL DISPARO, SIN BARCOS.
//TODO FRASE QUE INDICA QUE EMPIEZAN LAS RONDAS.
//TODO MOSTRAR EN QUE RONDA ESTAMOS POR Y QUE JUGADOR EST√Å JUGANDO.
//TODO FUNCI√ìN DISPARO (NO PODER DISPARAR EN LA MISMA CASILLA DOS VECES), FUNCI√ìN PARA MOSTRAR AGUA O TOCADO EN EL ENEMY BOARD.Cada disparo, mostrar√° la casilla seleccionada, los disparos le faltan al jugador X.
//TODO si en cambio da a una nave del oponente, ser√°entonces ‚ÄúTocado‚Äù. Si adem√°s no quedan m√°s casillas de esa nave ‚Äútocadas‚Äù, deber√° mostrarse ‚ÄúHundido‚Äù.
//TODO CADA JUGADOR PODR√Å SEGUIR DISPARANDO DURANTE EL MISMO TURNO HASTA QUE FALLE (AGUA).
//TODO --> y los tableros del jugador que est√° disparando (el propio y el ajeno) con la casilla ya marcada, sea agua o tocado.
//TODO El juego terminar√° cuando no haya m√°s disparos o bien cuando uno de los dos jugadores haya hundido toda la flota contrincante.
//TODO CUANDO TERMINE, MOSTRAR JUGADOR GANADOR.
//TODO CUANDO TERMINE, MOSTRAR TABLEROS PROPIOS DE JUGADOR 1 Y 2, PARA VER BARCOS QUE QUEDARON POR HUNDIR.

//2 JUGADORES
//CADA JUGADOR
        //TIENE DOS TABLEROS, PROPIO Y DEL ADVERSARIO.
           //ESTADOS DENTRO DE LAS CELDAS DE LOS TABLEROS: VAC√çO, AGUA, TOCADO, BARCO  
        //TIENE DISPAROS, MENSAJE DICIENDO DONDE APUNTAN LOS DISPAROS.
        //TIENE TURNOS/RONDAS.FRASE QUE INDICA QUE EMPIEZAN LAS RONDAS
//2 TABLEROS POR JUGADOR (EL PROPIO Y EL DEL ADVERSARIO) DE 10X10 (4, TABLEROS)
//NAVES POR TABLERO (2 TABLEROS PROPIOS y ADVERSARIO)
   //1 PORTAAVIONES - 5 CASILLAS
   //1 BUQUE - 4 CASILLAS
   //2 SUBMARINOS - 3 CASILLAS
   //3 CRUCEROS - 2 CASILLAS 
   //3 LANCHAS - 1 CASILLA
//100 DISPAROS POR JUGADOR (MATRIZ 10X10)

//PSEUDOC√ìDIGO
//Mientras no haya ganador:
//Turno jugador:
    //Mientras haya barcos del Jugador contrario:
        //Jugador 1 (J1) ‚Üí selecci√≥n de coordenada del tablero contrario
        //Mirar qu√© hay en el tablero propio del Jugador 2 (J2)
            //si agua
                //marcar agua en tablero contrario (J1)
                //marcar agua en tablero propio (J2)
                //basta jugador 1, turno del jugador 2
            //si tocado
                //marcar tocado en tablero contrario (J1)
                //marcar tocado en tablero propio (J2)
                //si hundido
                    //contar naves hundidas
                    //si todas naves hundida
                        //basta jugador 1



const BoatPicture = 'üö¢'
const Damaged = 'üî•'
const Water = 'üíß'
//We build board class
class Board {
    constructor(){
        //we build an array inside the object
        this.array =
        [
            ['','','','','','','','','',''],
            ['','','','','','','','','',''],
            ['','','','','','','','','',''],
            ['','','','','','','','','',''],
            ['','','','','','','','','',''],
            ['','','','','','','','','',''],
            ['','','','','','','','','',''],
            ['','','','','','','','','',''],
            ['','','','','','','','','',''],
            ['','','','','','','','','',''],
        ]
        //this.player
        //this.boardtype= BoardType
    
    }
    
} 

//We build Player class, which will build 2 objects, the player's own and enemy board.
class Player {
    constructor(name){
        this.name = name
        //Given the fact every player sees 2 boards per run, we create them inside the player object.
        this.OwnBoard = new Board()
        this.EnemyBoard = new Board()

    }


} 

class Boat {
    constructor (type, length, lives, position){
        this.type = type //which type of boat, i.e submarine
        this.length = length //number of boxes in the board
        this.lives = lives //remaining lives
        this.position  = []
    }
}

//Function that, when called, sets up everything to start the game
function SetupGame() {
    //console.table(MainBoard.Array)
    const Player1 = new Player("Player 1")
    const Player2 = new Player("Player 2")
    const Submarine = new Boat("submarine")

    console.log("THE GAME STARTS!")
    console.log(Player1.name +" OWN BOARD")
    console.table(Player1.OwnBoard.array)
    console.log(Player1.name +" ENEMYBOARD")
    console.table(Player1.EnemyBoard.array)

    console.log(Player2.name +" OWN BOARD")
    console.table(Player2.OwnBoard.array)
    console.log(Player2.name +" ENEMYBOARD")
    console.table(Player2.EnemyBoard.array)

    console.log(Submarine.length)
    
}

//we initialize the game
SetupGame();
